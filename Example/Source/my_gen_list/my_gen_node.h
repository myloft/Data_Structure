// 文件路径名:my_gen_list\my_gen_node.h
#ifndef __MY_GEN_NODE_H__
#define __MY_GEN_NODE_H__

#include "my_use_space_list.h"			// 广义表使用空间表类

#ifndef __MY_GEN_LIST_NODE_TYPE__
#define __MY_GEN_LIST_NODE_TYPE__
enum MyGenListNodeType {HEAD, ATOM, LIST};
#endif

// 广义表结点类
template<class ElemType>
struct MyGenListNode
{
// 数据成员:
	MyGenListNodeType tag;				
		// 标志域,HEAD(0):头结点, ATOM(1):原子结构, LIST(2):表结点
	MyGenListNode<ElemType> *nextLink;	// 指向同一层中的下一个结点指针域
	union
	{
		int ref;						// tag=HEAD,头结点,存放引用数
		ElemType atom;					// tag=ATOM,存放原子结点的数据域
		MyGenListNode<ElemType> *subLink;	// tag=LISK,存放指向子表的指针域
	}; 

// 构造函数:
	MyGenListNode(MyGenListNodeType tg = HEAD, MyGenListNode<ElemType> *next = NULL);
		// 由标志tg和指针next构造广义表结点
};

// 广义表结点类的实现部分
template<class ElemType>
MyGenListNode<ElemType>::MyGenListNode(MyGenListNodeType tg, 
	MyGenListNode<ElemType> *next)
// 操作结果：由标志tg和指针next构造广义表结点
{
	tag = tg;							// 标志
	nextLink = next;					// 后继
	gMyUseSpaceList.Push(this);			// 将指向当前结点的指针加入到广义表使用空间表中
}

#endif

 
